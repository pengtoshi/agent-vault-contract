{
  "address": "0x3b59969E59330DB9703f19946edE8E66A170CdA6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "contract TestDefi",
          "name": "_defi",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defi",
      "outputs": [
        {
          "internalType": "contract TestDefi",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retireStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yieldRate",
          "type": "uint256"
        }
      ],
      "name": "setYieldRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2b949c3f516835c23a776ae71d6ff8dece5a01db77f3ae2c1be7d4e713adc5f",
  "receipt": {
    "to": null,
    "from": "0x4950631e0D68A9E9E53b9466f50dCE161F88e42d",
    "contractAddress": "0x3b59969E59330DB9703f19946edE8E66A170CdA6",
    "transactionIndex": 1,
    "gasUsed": "590321",
    "logsBloom": "0x
    "blockHash": "0x3cf1c6f696c7659b83258359304ac5fbfcaea7370e85045be003b289913360a6",
    "transactionHash": "0xa2b949c3f516835c23a776ae71d6ff8dece5a01db77f3ae2c1be7d4e713adc5f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 21987242,
        "transactionHash": "0xa2b949c3f516835c23a776ae71d6ff8dece5a01db77f3ae2c1be7d4e713adc5f",
        "address": "0xae933Cc97Fd5AC48cb1726508ac2d3BE3BF92032",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000003b59969e59330db9703f19946ede8e66a170cda6",
          "0x000000000000000000000000b93b8c373c2db8234b6c162e016dbc69c3f981d5"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x3cf1c6f696c7659b83258359304ac5fbfcaea7370e85045be003b289913360a6"
      }
    ],
    "blockNumber": 21987242,
    "cumulativeGasUsed": "641942",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xae933Cc97Fd5AC48cb1726508ac2d3BE3BF92032",
    "0xB93b8C373c2Db8234B6c162E016dbc69C3F981D5"
  ],
  "numDeployments": 1,
  "solcInputHash": "4472a4139e3cdb547c03aaa5cde3cc0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"contract TestDefi\",\"name\":\"_defi\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defi\",\"outputs\":[{\"internalType\":\"contract TestDefi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldRate\",\"type\":\"uint256\"}],\"name\":\"setYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_defi\":\"TestDefi \\ucee8\\ud2b8\\ub799\\ud2b8 \\uc8fc\\uc18c\",\"_want\":\"\\uad00\\ub9ac\\ud560 \\uc790\\uc0b0 \\ud1a0\\ud070 \\uc8fc\\uc18c\"}},\"setYieldRate(uint256)\":{\"params\":{\"_yieldRate\":\"\\uc0c8\\ub85c\\uc6b4 \\uc218\\uc775\\ub960 (\\uc608: 1000 = 10%)\"}}},\"title\":\"TestStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf()\":{\"notice\":\"Returns the total amount of assets currently managed by the Strategy (including deposits and interest)\"},\"beforeDeposit()\":{\"notice\":\"Called before Vault deposits - performs necessary preliminary work (e.g., harvest)\"},\"constructor\":{\"notice\":\"\\uc0dd\\uc131\\uc790\"},\"defi()\":{\"notice\":\"\\uc0c1\\ud638\\uc791\\uc6a9\\ud560 TestDefi \\ucee8\\ud2b8\\ub799\\ud2b8 \\uc778\\uc2a4\\ud134\\uc2a4\"},\"deposit()\":{\"notice\":\"Called when funds are deposited from the Vault - implements logic to deposit funds into the actual DeFi protocol\"},\"retireStrategy()\":{\"notice\":\"Function to withdraw funds from the current Strategy when switching strategies\"},\"setYieldRate(uint256)\":{\"notice\":\"TestDefi\\uc758 \\uc218\\uc775\\ub960 \\uc124\\uc815 (\\ud544\\uc694\\ud55c \\uacbd\\uc6b0 \\uc0ac\\uc6a9)\"},\"want()\":{\"notice\":\"\\uad00\\ub9ac\\ud558\\ub294 \\uc790\\uc0b0 \\ud1a0\\ud070\"},\"withdraw(uint256)\":{\"notice\":\"Called when withdrawal is requested from the Vault - implements logic to return funds to the Vault\"}},\"notice\":\"\\ud14c\\uc2a4\\ud2b8\\uc6a9 Strategy \\ucee8\\ud2b8\\ub799\\ud2b8 - TestDefi \\ud504\\ub85c\\ud1a0\\ucf5c\\uacfc \\uc0c1\\ud638\\uc791\\uc6a9\\ud558\\ub294 \\uc804\\ub7b5 \\ucee8\\ud2b8\\ub799\\ud2b8 - AgentVault\\uc640 TestDefi \\uc0ac\\uc774\\uc758 \\uc911\\uac1c \\uc5ed\\ud560 \\uc218\\ud589\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/TestStrategy.sol\":\"TestStrategy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/interface/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IStrategy\\n * @notice Interface that defines the functions that Strategy contracts must implement to interact with the Vault\\n */\\ninterface IStrategy {\\n    /// @notice Returns the address of the asset (ERC20) managed by the Vault\\n    function want() external view returns (IERC20);\\n\\n    /// @notice Returns the total amount of assets currently managed by the Strategy (including deposits and interest)\\n    function balanceOf() external view returns (uint256);\\n\\n    /// @notice Called when funds are deposited from the Vault - implements logic to deposit funds into the actual DeFi protocol\\n    function deposit() external;\\n\\n    /// @notice Called when withdrawal is requested from the Vault - implements logic to return funds to the Vault\\n    function withdraw(uint256 amount) external;\\n\\n    /// @notice Called before Vault deposits - performs necessary preliminary work (e.g., harvest)\\n    function beforeDeposit() external;\\n\\n    /// @notice Function to withdraw funds from the current Strategy when switching strategies\\n    function retireStrategy() external;\\n}\\n\",\"keccak256\":\"0x0724b5b03e34c21aa7a22606e86d8a580d042fd64cb31939f289fbd65b060dbb\",\"license\":\"MIT\"},\"contracts/mock/TestDefi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./TestToken.sol\\\";\\n\\n/**\\n * @title TestDefi\\n * @notice \\ud14c\\uc2a4\\ud2b8\\uc6a9 DeFi \\ud504\\ub85c\\ud1a0\\ucf5c \\ucee8\\ud2b8\\ub799\\ud2b8\\n * - \\uc2a4\\ud14c\\uc774\\ud0b9 \\uae30\\ub2a5\\uacfc \\uc218\\uc775 \\ubc1c\\uc0dd\\uc744 \\uc2dc\\ubbac\\ub808\\uc774\\uc158\\n * - \\ud14c\\uc2a4\\ud2b8 \\ubaa9\\uc801\\uc73c\\ub85c \\uc218\\uc775\\ub960\\uc744 \\uc870\\uc808 \\uac00\\ub2a5\\n */\\ncontract TestDefi {\\n    /// @notice \\uc2a4\\ud14c\\uc774\\ud0b9 \\uc790\\uc0b0 \\ud1a0\\ud070\\n    IERC20 public immutable stakingToken;\\n\\n    /// @notice \\uc0ac\\uc6a9\\uc790\\ubcc4 \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\uc790\\uc0b0 \\uc218\\ub7c9\\n    mapping(address => uint256) private _stakedBalance;\\n\\n    /// @notice \\ucd1d \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\uc790\\uc0b0 \\uc218\\ub7c9\\n    uint256 private _totalStaked;\\n\\n    /// @notice \\uc218\\uc775\\ub960 (\\uc608: 1000 = 10%)\\n    uint256 public yieldRate;\\n\\n    /// @notice \\uc0ac\\uc6a9\\uc790\\ubcc4 \\ub9c8\\uc9c0\\ub9c9 \\uc218\\uc775 \\uacc4\\uc0b0 \\uc2dc\\uac04\\n    mapping(address => uint256) public lastYieldTime;\\n\\n    /**\\n     * @notice \\uc0dd\\uc131\\uc790\\n     * @param _stakingToken \\uc2a4\\ud14c\\uc774\\ud0b9\\ud560 \\ud1a0\\ud070 \\uc8fc\\uc18c\\n     * @param _yieldRate \\uc5f0\\uac04 \\uc218\\uc775\\ub960 (\\uc608: 1000 = 10%)\\n     */\\n    constructor(IERC20 _stakingToken, uint256 _yieldRate) {\\n        stakingToken = _stakingToken;\\n        yieldRate = _yieldRate;\\n    }\\n\\n    /**\\n     * @notice \\uc218\\uc775\\ub960 \\uc124\\uc815\\n     * @param _yieldRate \\uc0c8\\ub85c\\uc6b4 \\uc218\\uc775\\ub960 (\\uc608: 1000 = 10%)\\n     */\\n    function setYieldRate(uint256 _yieldRate) external {\\n        yieldRate = _yieldRate;\\n    }\\n\\n    /**\\n     * @notice \\ud1a0\\ud070 \\uc2a4\\ud14c\\uc774\\ud0b9 \\ud568\\uc218\\n     * @param amount \\uc2a4\\ud14c\\uc774\\ud0b9\\ud560 \\ud1a0\\ud070 \\uc218\\ub7c9\\n     */\\n    function stake(uint256 amount) external {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n        // \\uba3c\\uc800 \\uae30\\uc874 \\uc218\\uc775 \\uacc4\\uc0b0\\n        _calculateYield(msg.sender);\\n\\n        // \\ud1a0\\ud070 \\uc804\\uc1a1\\n        stakingToken.transferFrom(msg.sender, address(this), amount);\\n\\n        // \\uc2a4\\ud14c\\uc774\\ud0b9 \\uc794\\uc561 \\uc5c5\\ub370\\uc774\\ud2b8\\n        _stakedBalance[msg.sender] += amount;\\n        _totalStaked += amount;\\n\\n        // \\ub9c8\\uc9c0\\ub9c9 \\uc218\\uc775 \\uacc4\\uc0b0 \\uc2dc\\uac04 \\uc5c5\\ub370\\uc774\\ud2b8\\n        lastYieldTime[msg.sender] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\ud1a0\\ud070 \\ucd9c\\uae08 \\ud568\\uc218\\n     * @param amount \\ucd9c\\uae08\\ud560 \\ud1a0\\ud070 \\uc218\\ub7c9\\n     */\\n    function unstake(uint256 amount) external {\\n        require(amount > 0, \\\"Cannot unstake 0\\\");\\n\\n        uint256 totalBalance = stakedBalanceOf(msg.sender);\\n        require(amount <= totalBalance, \\\"Insufficient staked balance\\\");\\n\\n        // \\uba3c\\uc800 \\uae30\\uc874 \\uc218\\uc775 \\uacc4\\uc0b0\\n        _calculateYield(msg.sender);\\n\\n        // \\uc2a4\\ud14c\\uc774\\ud0b9 \\uc794\\uc561 \\uc5c5\\ub370\\uc774\\ud2b8\\n        _stakedBalance[msg.sender] -= amount;\\n        _totalStaked -= amount;\\n\\n        // \\ud1a0\\ud070 \\uc804\\uc1a1\\n        stakingToken.transfer(msg.sender, amount);\\n\\n        // \\ub9c8\\uc9c0\\ub9c9 \\uc218\\uc775 \\uacc4\\uc0b0 \\uc2dc\\uac04 \\uc5c5\\ub370\\uc774\\ud2b8\\n        lastYieldTime[msg.sender] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice \\ubc1c\\uc0dd\\ud55c \\uc218\\uc775 \\uacc4\\uc0b0 \\ubc0f \\uc9c0\\uae09\\n     */\\n    function harvest() external {\\n        _calculateYield(msg.sender);\\n    }\\n\\n    /**\\n     * @notice \\uc0ac\\uc6a9\\uc790\\uc758 \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\uc794\\uc561 \\uc870\\ud68c\\n     * @param account \\uc870\\ud68c\\ud560 \\uc0ac\\uc6a9\\uc790 \\uc8fc\\uc18c\\n     * @return \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\uc794\\uc561 (\\uc218\\uc775 \\ud3ec\\ud568)\\n     */\\n    function stakedBalanceOf(address account) public view returns (uint256) {\\n        if (_stakedBalance[account] == 0) {\\n            return 0;\\n        }\\n\\n        uint256 timeElapsed = block.timestamp - lastYieldTime[account];\\n        uint256 yield = (_stakedBalance[account] * yieldRate * timeElapsed) / (365 days * 10000);\\n\\n        return _stakedBalance[account] + yield;\\n    }\\n\\n    /**\\n     * @notice \\ucd1d \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\uae08\\uc561 \\uc870\\ud68c\\n     * @return \\ucd1d \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\uae08\\uc561\\n     */\\n    function totalStaked() external view returns (uint256) {\\n        return _totalStaked;\\n    }\\n\\n    /**\\n     * @notice \\ub0b4\\ubd80 \\ud568\\uc218: \\uc0ac\\uc6a9\\uc790\\uc758 \\uc218\\uc775 \\uacc4\\uc0b0 \\ubc0f \\uc9c0\\uae09\\n     * @param account \\uc218\\uc775\\uc744 \\uacc4\\uc0b0\\ud560 \\uc0ac\\uc6a9\\uc790 \\uc8fc\\uc18c\\n     */\\n    function _calculateYield(address account) internal {\\n        if (_stakedBalance[account] == 0 || lastYieldTime[account] == 0) {\\n            lastYieldTime[account] = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 timeElapsed = block.timestamp - lastYieldTime[account];\\n        if (timeElapsed == 0) return;\\n\\n        uint256 yield = (_stakedBalance[account] * yieldRate * timeElapsed) / (365 days * 10000);\\n\\n        if (yield > 0) {\\n            // \\ud14c\\uc2a4\\ud2b8 \\ud1a0\\ud070 \\ubc1c\\ud589\\ud558\\uc5ec \\uc218\\uc775\\uc73c\\ub85c \\uc9c0\\uae09\\n            TestToken(address(stakingToken)).mint(address(this), yield);\\n            _stakedBalance[account] += yield;\\n            _totalStaked += yield;\\n        }\\n\\n        lastYieldTime[account] = block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x05c31262a382559712adbe1599440596d76781addabf7c7a256ad45a49f1783e\",\"license\":\"MIT\"},\"contracts/mock/TestStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"contracts/interface/IStrategy.sol\\\";\\nimport \\\"./TestDefi.sol\\\";\\n\\n/**\\n * @title TestStrategy\\n * @notice \\ud14c\\uc2a4\\ud2b8\\uc6a9 Strategy \\ucee8\\ud2b8\\ub799\\ud2b8\\n * - TestDefi \\ud504\\ub85c\\ud1a0\\ucf5c\\uacfc \\uc0c1\\ud638\\uc791\\uc6a9\\ud558\\ub294 \\uc804\\ub7b5 \\ucee8\\ud2b8\\ub799\\ud2b8\\n * - AgentVault\\uc640 TestDefi \\uc0ac\\uc774\\uc758 \\uc911\\uac1c \\uc5ed\\ud560 \\uc218\\ud589\\n */\\ncontract TestStrategy is IStrategy {\\n    /// @notice \\uad00\\ub9ac\\ud558\\ub294 \\uc790\\uc0b0 \\ud1a0\\ud070\\n    IERC20 public immutable want;\\n\\n    /// @notice \\uc0c1\\ud638\\uc791\\uc6a9\\ud560 TestDefi \\ucee8\\ud2b8\\ub799\\ud2b8 \\uc778\\uc2a4\\ud134\\uc2a4\\n    TestDefi public immutable defi;\\n\\n    /**\\n     * @notice \\uc0dd\\uc131\\uc790\\n     * @param _want \\uad00\\ub9ac\\ud560 \\uc790\\uc0b0 \\ud1a0\\ud070 \\uc8fc\\uc18c\\n     * @param _defi TestDefi \\ucee8\\ud2b8\\ub799\\ud2b8 \\uc8fc\\uc18c\\n     */\\n    constructor(IERC20 _want, TestDefi _defi) {\\n        want = _want;\\n        defi = _defi;\\n\\n        // TestDefi\\uc5d0 \\uc790\\uc0b0 \\ud1a0\\ud070 \\uc0ac\\uc6a9 \\uad8c\\ud55c \\ubd80\\uc5ec\\n        want.approve(address(_defi), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice TestDefi\\uc758 \\uc218\\uc775\\ub960 \\uc124\\uc815 (\\ud544\\uc694\\ud55c \\uacbd\\uc6b0 \\uc0ac\\uc6a9)\\n     * @param _yieldRate \\uc0c8\\ub85c\\uc6b4 \\uc218\\uc775\\ub960 (\\uc608: 1000 = 10%)\\n     */\\n    function setYieldRate(uint256 _yieldRate) external {\\n        defi.setYieldRate(_yieldRate);\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function deposit() external override {\\n        uint256 balance = want.balanceOf(address(this));\\n        if (balance > 0) {\\n            defi.stake(balance);\\n        }\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function withdraw(uint256 amount) external override {\\n        // \\ud604\\uc7ac TestDefi\\uc5d0 \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\uc794\\uc561 \\ud655\\uc778\\n        uint256 stakedBalance = defi.stakedBalanceOf(address(this));\\n        require(amount <= stakedBalance, \\\"Strategy: insufficient staked amount\\\");\\n\\n        // TestDefi\\uc5d0\\uc11c \\uc790\\uc0b0 \\ucd9c\\uae08\\n        defi.unstake(amount);\\n\\n        // \\uc694\\uccad\\uc790(AgentVault)\\uc5d0\\uac8c \\uc790\\uc0b0 \\uc804\\uc1a1\\n        want.transfer(msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function beforeDeposit() external override {\\n        // TestDefi\\uc5d0\\uc11c \\uc218\\uc775 \\uc218\\ud655\\n        defi.harvest();\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function retireStrategy() external override {\\n        // \\uba3c\\uc800 \\uc218\\uc775 \\uc218\\ud655\\n        defi.harvest();\\n\\n        // TestDefi\\uc5d0\\uc11c \\ubaa8\\ub4e0 \\uc790\\uc0b0 \\ucd9c\\uae08\\n        uint256 stakedBalance = defi.stakedBalanceOf(address(this));\\n        if (stakedBalance > 0) {\\n            defi.unstake(stakedBalance);\\n        }\\n\\n        // \\ubaa8\\ub4e0 \\uc790\\uc0b0\\uc744 Vault\\ub85c \\ubc18\\ud658\\n        uint256 balance = want.balanceOf(address(this));\\n        if (balance > 0) {\\n            want.transfer(msg.sender, balance);\\n        }\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function balanceOf() external view override returns (uint256) {\\n        // TestDefi\\uc5d0 \\uc2a4\\ud14c\\uc774\\ud0b9\\ub41c \\uc790\\uc0b0 + \\uc774 \\ucee8\\ud2b8\\ub799\\ud2b8\\uac00 \\ubcf4\\uc720\\ud55c \\uc790\\uc0b0\\n        return defi.stakedBalanceOf(address(this)) + want.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xc49402c51b43c8260fdb0885e65928f531bbb8c28d9fb3c4122b3eee98f5d8f4\",\"license\":\"MIT\"},\"contracts/mock/TestToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title TestToken\\n * @notice \\ud14c\\uc2a4\\ud2b8\\uc6a9 ERC20 \\ud1a0\\ud070 \\ucee8\\ud2b8\\ub799\\ud2b8\\n * - \\ud14c\\uc2a4\\ud2b8 \\ubaa9\\uc801\\uc73c\\ub85c \\ud2b9\\uc815 \\uc8fc\\uc18c\\uc5d0 \\ud1a0\\ud070\\uc744 mint\\ud560 \\uc218 \\uc788\\uc74c\\n */\\ncontract TestToken is ERC20 {\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\\n\\n    function mint(address to, uint256 amount) external {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) external {\\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x23e74e2b62c94c9bfc914c6b8beb0a4292c6ba702ee9f1c5835ef3232154d79d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561000f575f5ffd5b50604051610ad6380380610ad683398101604081905261002e916100ca565b6001600160a01b03828116608081905290821660a081905260405163095ea7b360e01b815260048101919091525f19602482015263095ea7b3906044016020604051808303815f875af1158015610087573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100ab9190610102565b505050610128565b6001600160a01b03811681146100c7575f5ffd5b50565b5f5f604083850312156100db575f5ffd5b82516100e6816100b3565b60208401519092506100f7816100b3565b809150509250929050565b5f60208284031215610112575f5ffd5b81518015158114610121575f5ffd5b9392505050565b60805160a05161092d6101a95f395f818160fa01528181610160015281816101da015281816102c3015281816103b801528181610428015281816104aa0152818161053a0152818161071e015261084401525f818160a30152818161033c015281816105b1015281816106460152818161069801526107b5015261092d5ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c8063573fef0a11610058578063573fef0a1461011c5780636ba1b3e014610124578063722713f71461012c578063d0e30db014610142575f5ffd5b80631411dab0146100895780631f1fcd511461009e5780632e1a7d4d146100e257806338c0f073146100f5575b5f5ffd5b61009c61009736600461087e565b61014a565b005b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61009c6100f036600461087e565b6101c3565b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b61009c6103b6565b61009c610426565b610134610681565b6040519081526020016100d9565b61009c61079e565b6040516301411dab60e41b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631411dab0906024015b5f604051808303815f87803b1580156101aa575f5ffd5b505af11580156101bc573d5f5f3e3d5ffd5b5050505050565b604051631676539160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631676539190602401602060405180830381865afa158015610227573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061024b9190610895565b9050808211156102ad5760405162461bcd60e51b8152602060048201526024808201527f53747261746567793a20696e73756666696369656e74207374616b656420616d6044820152631bdd5b9d60e21b606482015260840160405180910390fd5b6040516305c2fbcf60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de78906024015f604051808303815f87803b15801561030c575f5ffd5b505af115801561031e573d5f5f3e3d5ffd5b505060405163a9059cbb60e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a9059cbb91506044015b6020604051808303815f875af115801561038d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103b191906108ac565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634641257d6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561040e575f5ffd5b505af1158015610420573d5f5f3e3d5ffd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634641257d6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561047e575f5ffd5b505af1158015610490573d5f5f3e3d5ffd5b5050604051631676539160e01b81523060048201525f92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150631676539190602401602060405180830381865afa1580156104f8573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061051c9190610895565b9050801561059a576040516305c2fbcf60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de78906024015f604051808303815f87803b158015610583575f5ffd5b505af1158015610595573d5f5f3e3d5ffd5b505050505b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156105fe573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106229190610895565b9050801561067d5760405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401610371565b5050565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156106e5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107099190610895565b604051631676539160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631676539190602401602060405180830381865afa15801561076b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061078f9190610895565b61079991906108d2565b905090565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610802573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108269190610895565b9050801561087b5760405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401610193565b50565b5f6020828403121561088e575f5ffd5b5035919050565b5f602082840312156108a5575f5ffd5b5051919050565b5f602082840312156108bc575f5ffd5b815180151581146108cb575f5ffd5b9392505050565b808201808211156108f157634e487b7160e01b5f52601160045260245ffd5b9291505056fea2646970667358221220000c0243dc60bd2a2c9c8baebbbd6c8e9915d685f6972456b01305c5f18fdd5864736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b5060043610610085575f3560e01c8063573fef0a11610058578063573fef0a1461011c5780636ba1b3e014610124578063722713f71461012c578063d0e30db014610142575f5ffd5b80631411dab0146100895780631f1fcd511461009e5780632e1a7d4d146100e257806338c0f073146100f5575b5f5ffd5b61009c61009736600461087e565b61014a565b005b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61009c6100f036600461087e565b6101c3565b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b61009c6103b6565b61009c610426565b610134610681565b6040519081526020016100d9565b61009c61079e565b6040516301411dab60e41b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631411dab0906024015b5f604051808303815f87803b1580156101aa575f5ffd5b505af11580156101bc573d5f5f3e3d5ffd5b5050505050565b604051631676539160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631676539190602401602060405180830381865afa158015610227573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061024b9190610895565b9050808211156102ad5760405162461bcd60e51b8152602060048201526024808201527f53747261746567793a20696e73756666696369656e74207374616b656420616d6044820152631bdd5b9d60e21b606482015260840160405180910390fd5b6040516305c2fbcf60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de78906024015f604051808303815f87803b15801561030c575f5ffd5b505af115801561031e573d5f5f3e3d5ffd5b505060405163a9059cbb60e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a9059cbb91506044015b6020604051808303815f875af115801561038d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103b191906108ac565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634641257d6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561040e575f5ffd5b505af1158015610420573d5f5f3e3d5ffd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634641257d6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561047e575f5ffd5b505af1158015610490573d5f5f3e3d5ffd5b5050604051631676539160e01b81523060048201525f92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150631676539190602401602060405180830381865afa1580156104f8573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061051c9190610895565b9050801561059a576040516305c2fbcf60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de78906024015f604051808303815f87803b158015610583575f5ffd5b505af1158015610595573d5f5f3e3d5ffd5b505050505b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156105fe573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106229190610895565b9050801561067d5760405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401610371565b5050565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156106e5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107099190610895565b604051631676539160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631676539190602401602060405180830381865afa15801561076b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061078f9190610895565b61079991906108d2565b905090565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610802573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108269190610895565b9050801561087b5760405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401610193565b50565b5f6020828403121561088e575f5ffd5b5035919050565b5f602082840312156108a5575f5ffd5b5051919050565b5f602082840312156108bc575f5ffd5b815180151581146108cb575f5ffd5b9392505050565b808201808211156108f157634e487b7160e01b5f52601160045260245ffd5b9291505056fea2646970667358221220000c0243dc60bd2a2c9c8baebbbd6c8e9915d685f6972456b01305c5f18fdd5864736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_defi": "TestDefi 컨트랙트 주소",
          "_want": "관리할 자산 토큰 주소"
        }
      },
      "setYieldRate(uint256)": {
        "params": {
          "_yieldRate": "새로운 수익률 (예: 1000 = 10%)"
        }
      }
    },
    "title": "TestStrategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf()": {
        "notice": "Returns the total amount of assets currently managed by the Strategy (including deposits and interest)"
      },
      "beforeDeposit()": {
        "notice": "Called before Vault deposits - performs necessary preliminary work (e.g., harvest)"
      },
      "constructor": {
        "notice": "생성자"
      },
      "defi()": {
        "notice": "상호작용할 TestDefi 컨트랙트 인스턴스"
      },
      "deposit()": {
        "notice": "Called when funds are deposited from the Vault - implements logic to deposit funds into the actual DeFi protocol"
      },
      "retireStrategy()": {
        "notice": "Function to withdraw funds from the current Strategy when switching strategies"
      },
      "setYieldRate(uint256)": {
        "notice": "TestDefi의 수익률 설정 (필요한 경우 사용)"
      },
      "want()": {
        "notice": "관리하는 자산 토큰"
      },
      "withdraw(uint256)": {
        "notice": "Called when withdrawal is requested from the Vault - implements logic to return funds to the Vault"
      }
    },
    "notice": "테스트용 Strategy 컨트랙트 - TestDefi 프로토콜과 상호작용하는 전략 컨트랙트 - AgentVault와 TestDefi 사이의 중개 역할 수행",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}