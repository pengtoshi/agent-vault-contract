/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IAgentVaultFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createVault(address,address,address,address,string,string)": FunctionFragment;
    "getAllVaults()": FunctionFragment;
    "getVaultCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCount",
    data: BytesLike
  ): Result;

  events: {
    "VaultCreated(address,address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export class IAgentVaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAgentVaultFactoryInterface;

  functions: {
    createVault(
      asset: string,
      strategy: string,
      vaultMaster: string,
      agent: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllVaults(overrides?: CallOverrides): Promise<[string[]]>;

    getVaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createVault(
    asset: string,
    strategy: string,
    vaultMaster: string,
    agent: string,
    name: string,
    symbol: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllVaults(overrides?: CallOverrides): Promise<string[]>;

  getVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createVault(
      asset: string,
      strategy: string,
      vaultMaster: string,
      agent: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllVaults(overrides?: CallOverrides): Promise<string[]>;

    getVaultCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    VaultCreated(
      vault?: string | null,
      asset?: string | null,
      name?: null,
      symbol?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { vault: string; asset: string; name: string; symbol: string }
    >;
  };

  estimateGas: {
    createVault(
      asset: string,
      strategy: string,
      vaultMaster: string,
      agent: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllVaults(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createVault(
      asset: string,
      strategy: string,
      vaultMaster: string,
      agent: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
